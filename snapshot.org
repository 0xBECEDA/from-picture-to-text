#+STARTUP: showall indent hidestars


#+BEGIN_SRC lisp

  (ql:quickload "clx")
  (ql:quickload "zpng")
  (ql:quickload "png-read")

  (defmacro with-display (host (display screen root-window) &body body)
    `(let* ((,display (xlib:open-display ,host))
            (,screen (first (xlib:display-roots ,display)))
            (,root-window (xlib:screen-root ,screen)))
       (unwind-protect (progn ,@body)
         (xlib:close-display ,display))))

  (defmacro with-default-display ((display &key (force nil)) &body body)
    `(let ((,display (xlib:open-default-display)))
       (unwind-protect
            (unwind-protect
                 ,@body
              (when ,force
                (xlib:display-force-output ,display)))
         (xlib:close-display ,display))))

  (defmacro with-default-display-force ((display) &body body)
    `(with-default-display (,display :force t) ,@body))

  (defmacro with-default-screen ((screen) &body body)
    (let ((display (gensym)))
      `(with-default-display (,display)
         (let ((,screen (xlib:display-default-screen ,display)))
           ,@body))))

  (defmacro with-default-window ((window) &body body)
    (let ((screen (gensym)))
      `(with-default-screen (,screen)
         (let ((,window (xlib:screen-root ,screen)))
           ,@body))))

  (defun x-size ()
    (with-default-screen (s)
      (values
       (xlib:screen-width s)
       (xlib:screen-height s))))

  (defun raw-image->png (data width height)
    (let* ((png (make-instance 'zpng:png :width width :height height
                               :color-type :truecolor-alpha
                               :image-data data))
           (data (zpng:data-array png)))
      (dotimes (y height)
        (dotimes (x width)
          ;; BGR -> RGB, ref code: https://goo.gl/slubfW
          ;; diffs between RGB and BGR: https://goo.gl/si1Ft5
          (rotatef (aref data y x 0) (aref data y x 2))
          (setf (aref data y x 3) 255)))
      png))

  (defparameter *default-x* 70)
  (defparameter *default-y* 0)
  (defparameter *default-width* 600)
  (defparameter *default-heght* 300)

  (multiple-value-bind (default-width default-height) (x-size)
    (defun x-snapshot (&key (x *default-x*) (y *default-y*)
                         (width  *default-width*) (height *default-heght*)
                         path)
      ;; "Return RGB data array (The dimensions correspond to the height, width,
      ;; and pixel components, see comments in x-snapsearch for more details),
      ;; or write to file (PNG only), depend on if you provide the path keyword"
      (with-default-window (w)
        (let ((image
               (raw-image->png
                (xlib:get-raw-image w :x x :y y
                                    :width width :height height
                                    :format :z-pixmap)
                width height)))
          (if path
              (let* ((ext (pathname-type path))
                     (path
                      (if ext
                          path
                          (concatenate 'string path ".png")))
                     (png? (or (null ext) (equal ext "png"))))
                (cond
                  (png? (zpng:write-png image path))
                  (t (error "Only PNG file is supported"))))
              (zpng:data-array image))))))

  ;; ;; TEST: save screenshot
  ;; (x-snapshot :path "~/Pictures/snap1.png")


  ;; Ошибка, возникающая когда мы пытаемся прочитать png
  ;; в котором неизвестно сколько байт на точку
  (define-condition unk-png-color-type (error)
    ((color :initarg :color :reader color))
    (:report
     (lambda (condition stream)
       (format stream "Error in LOAD-PNG: unknown color type: ~A"
               (color condition)))))

  (defun load-png (pathname-str)
    "Возвращает массив size-X столбцов по size-Y точек,
     где столбцы идут слева-направо, а точки в них - сверху-вниз
     ----
     В zpng есть указание на возможные варианты COLOR:
     ----
           (defmethod samples-per-pixel (png)
             (ecase (color-type png)
               (:grayscale 1)
               (:truecolor 3)
               (:indexed-color 1)
               (:grayscale-alpha 2)
               (:truecolor-alpha 4)))
    "
    (let* ((png (png-read:read-png-file pathname-str))
           (image-data (png-read:image-data png))
           (color (png-read:colour-type png))
           (dims (cond ((or (equal color :truecolor-alpha)
                            (equal color :truecolor))
                        (list (array-dimension image-data 1)
                              (array-dimension image-data 0)
                              (array-dimension image-data 2)))
                       ((or (equal color :grayscale)
                            (equal color :greyscale))
                        (list (array-dimension image-data 1)
                              (array-dimension image-data 0)))
                       (t (error 'unk-png-color-type :color color))))
           (result ;; меняем размерности X и Y местами
            (make-array dims :element-type '(unsigned-byte 8))))
      ;; (format t "~% new-arr ~A "(array-dimensions result))
      ;; ширина, высота, цвет => высота, ширина, цвет
      (macrolet ((cycle (&body body)
                   `(do ((y 0 (incf y)))
                        ((= y (array-dimension result 0)))
                      (do ((x 0 (incf x)))
                          ((= x (array-dimension result 1)))
                        ,@body))))
        (cond ((or (equal color :truecolor-alpha)
                   (equal color :truecolor))
               (cycle (do ((z 0 (incf z)))
                          ((= z (array-dimension result 2)))
                        (setf (aref result y x z)
                              (aref image-data x y z)))))
              ((or (equal color :grayscale)
                   (equal color :greyscale))
               (cycle (setf (aref result y x)
                            (aref image-data x y))))
              (t (error 'unk-png-color-type :color color)))
        result)))

  ;; ;; TEST: equality screenshot and load-file-data
  ;; (assert (equalp (progn
  ;;                   (x-snapshot :path "~/Pictures/snap2.png")
  ;;                   (load-png "~/Pictures/snap2.png"))
  ;;                 (x-snapshot)))


  (defun save-png (width height pathname-str image
                   &optional (color-type :truecolor-alpha))
    (let* ((png (make-instance 'zpng:png :width width :height height
                               :color-type color-type))
           (vector (make-array ;; displaced vector - need copy for save
                    (* height width (zpng:samples-per-pixel png))
                    :displaced-to image :element-type '(unsigned-byte 8))))
      ;; Тут применен потенциально опасный трюк, когда мы создаем
      ;; объект PNG без данных, а потом добавляем в него данные,
      ;; используя неэкспортируемый writer.
      ;; Это нужно чтобы получить третью размерность массива,
      ;; который мы хотим передать как данные и при этом
      ;; избежать создания для этого временного объекта
      (setf (zpng::%image-data png) (copy-seq vector))
      (zpng:write-png png pathname-str)))


  ;; ;; TEST: saving loaded data
  ;; (let* ((from "~/Pictures/snap2.png")
  ;;        (to   "~/Pictures/snap3.png")
  ;;        (image-data (load-png from)))
  ;;   (destructuring-bind (height width depth)
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data)))

  ;; ;; TEST: saving screenshot data
  ;; (let* ((to   "~/Pictures/snap4.png")
  ;;        (image-data (x-snapshot)))
  ;;   (destructuring-bind (height width depth)
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data)))


  (defun binarization (image &optional threshold)
    (let* ((dims (array-dimensions image))
           (new-dims (cond ((equal 3 (length dims))  (butlast dims))
                           ((equal 2 (length dims))  dims)
                           (t (error 'binarization-error))))
           (result (make-array new-dims :element-type '(unsigned-byte 8))))
      (macrolet ((cycle (&body body)
                   `(do ((y 0 (incf y)))
                        ((= y (array-dimension image 0)))
                      (do ((x 0 (incf x)))
                          ((= x (array-dimension image 1)))
                        ,@body))))
        (cond ((equal 3 (length dims))
               (cycle (do ((z 0 (incf z)))
                          ((= z (array-dimension image 2)))
                        (let ((avg (floor (+ (aref image y x 0)
                                             (aref image y x 1)
                                             (aref image y x 2))
                                          3)))
                          (when threshold
                            (if (< threshold avg)
                                (setf avg 255)
                                (setf avg 0)))
                          (setf (aref result y x) avg)))))
              ((equal 2 (length dims))
               (cycle (let ((avg (aref image y x)))
                        (when threshold
                          (if (< threshold avg)
                              (setf avg 255)
                              (setf avg 0)))
                        (setf (aref result y x) avg))))
              (t (error 'binarization-error))))
      result))

  ;; ;; TEST: load file and translate it to grayscale and save
  ;; (let* ((from "~/Pictures/snap4.png")
  ;;        (to   "~/Pictures/snap5.png")
  ;;        (image-data (binarization (load-png from))))
  ;;   (destructuring-bind (height width) ;; NB: no depth!
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data :grayscale))) ;; NB: grayscale!


  ;; ;; TEST: binarize and save screenshot
  ;; (let* ((to   "~/Pictures/snap6.png")
  ;;        (image-data (binarization (x-snapshot) 127))) ;; NEW: threshold!
  ;;   (destructuring-bind (height width) ;; NB: no depth!
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data :grayscale))) ;; NB: grayscale!

  ;; ;; TEST: try to load grayscale image and save it
  ;; (let* ((from "~/Pictures/snap6.png")
  ;;        (to   "~/Pictures/snap7.png")
  ;;        (image-data (load-png from)))
  ;;   (destructuring-bind (height width)
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data :grayscale)))

  ;; ;; TEST: try to load grayscale image, binarize and save it
  ;; (let* ((from "~/Pictures/snap7.png")
  ;;        (to   "~/Pictures/snap8.png")
  ;;        (image-data (binarization (load-png from) 127)))
  ;;   (destructuring-bind (height width) ;; NB: no depth!
  ;;       (array-dimensions image-data)
  ;;     (save-png width height to image-data :grayscale)))
#+END_SRC
